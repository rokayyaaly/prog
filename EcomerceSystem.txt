package ecommerceesystem;

import java.util.Scanner;
import javax.swing.SwingUtilities;

public class EcommerceeSystem {

    public static void main(String[] args) {
          SwingUtilities.invokeLater(() -> new GUI());
            Scanner scanner = new Scanner(System.in);
        
        ElectronicProduct electronicProduct = new ElectronicProduct("Samsung", 1 , 1 , "smartphone" , (float)599.9);
        ClothingProduct clothingProduct = new ClothingProduct("Medium" , "Cotton" , 2 , "T-shirt" , (float)19.99 );
        BookProduct bookProduct = new BookProduct("Oâ€™Reilly" , "X Publications" , 3 , "OOP" , (float)39.99);
        
        
        // Create customer
        System.out.println("Welcome to the E-Commerce System!");
        System.out.println("Enter your customer ID: ");
        int customerId = scanner.nextInt();
        System.out.println("Enter your name: ");
        String customerName = scanner.nextLine();
        scanner.nextLine(); // Consume extra newline character
        System.out.println("Enter your address: ");
        String customerAddress = scanner.nextLine();
        Customer customer = new Customer(customerId, customerName, customerAddress);
        
        System.out.println("How many products you want to add to your cart? ");
        int itemsnum = scanner.nextInt();
        Cart cart = new Cart(customerId , itemsnum);
        
        for(int i = 0; i<itemsnum; i++){
        System.out.println("Which product you would like to add? 1- Smartphone 2- T-shirt 3- OOP ");
        int choice = scanner.nextInt();
        switch(choice){
            case 1 :
                cart.addProduct(electronicProduct);
                break;
            case 2 :
                cart.addProduct(clothingProduct);
                break;
            case 3 :
                cart.addProduct(bookProduct);
                break;                
            default :
                System.out.println("Unavailable option");
         }
        }    
        
        System.out.print("The total is $" + cart.calculatePrice() + " ");
        System.out.println("Would you like to place the order? 1- Yes 2- No");
        int option = scanner.nextInt();
        switch(option){
            case 1 : 
              cart.placeOrder();
              break;
            case 2 :
                System.out.println("Thank you");
                break;
            default :
               System.out.println("Unavailable option"); 
        }
    }
    
}
package ecommerceesystem;

public class Product {
      private int productId;
    private String name;
    private float price;
    Product(int productId, String name, float price){
    this.productId = productId;
    this.name = name;
    this.price = price;
    }
    public int getProductId(){
    return productId;
    }
    public String getName(){
    return name;
    }
    public float getPrice(){
    return price;
    }
    public int setProductId(int productId){
    this.productId = productId;
    if(productId <0){
    return Math.abs(productId);
    }else{
    return productId;
     }
    }
    public void setName(String name){
    this.name = name;
    }
    public float setPrice(float price){
    this.price = price;
    if(price <0){
    return Math.abs(price);
    }else{
    return price;
     }  
}
    
}
package ecommerceesystem;

public class ElectronicProduct extends Product {
     private String brand;
    private int warrantyPeriod;

    ElectronicProduct(String brand, int warrantyPeriod, int productId, String name, float price){
    super(productId, name, price);
    this.brand = brand;
    this.warrantyPeriod = warrantyPeriod;
    }

    public String getBrand(){
    return brand;
    }

    public int getWarrantyPeriod(){
    return warrantyPeriod;
    }

    public void setBrand(String brand){
    this.brand = brand;
    }

    public int setWarrantyPeriod(int warrantyPeriod){
    this.warrantyPeriod = warrantyPeriod;
    if(warrantyPeriod <0){
    return Math.abs(warrantyPeriod);
    }else{
    return warrantyPeriod;
     }
    }
    
}
package ecommerceesystem;

public class ClothingProduct extends Product{
     private String size;
    private String fabric;

    ClothingProduct(String size, String fabric, int productId, String name, float price){
    super(productId, name, price);
    this.size = size;
    this.fabric = fabric;
    }
    
    public String getSize(){
    return size;
    }

    public String getFabric(){
    return fabric;
    }
    
    public void setSize(String size){
    this.size = size;
    }

    public void setFabric(String fabric){
    this.fabric = fabric;
    }
    
}
package ecommerceesystem;

public class BookProduct extends Product{
     private String author;
    private String publisher;

    BookProduct(String author, String publisher, int productId, String name, float price){
    super(productId, name, price);
    this.author = author;
    this.publisher = publisher;
    }

    public String getAuthor(){
    return author;
    }

    public String getPublisher(){
    return publisher;
    }
   
    public void setAuthor(String author){
    this.author = author;
    }

    public void setPublisher(String publisher){
    this.publisher = publisher;
    }
    
}
package ecommerceesystem;

public class Customer {
     private int customerId;
    private String name;
    private String address;

    Customer(int customerId, String name, String address){
    this.customerId = customerId;
    this.name = name;
    this.address = address;
    }

    public int getCustomerId(){
    return customerId;
    }

    public String getName(){
    return name;
    }
    
    public String getAddress(){
    return address;
    }

    public void setName(String name){
    this.name = name;
    }
    
    public int setCustomerId(int customerId){
    this.customerId = customerId;
    if(customerId <0){
    return Math.abs(customerId);
    }else{
    return customerId;
     }
    }

    public void setAddress(String address){
    this.address = address;
    }
    
}
package ecommerceesystem;
public class Cart {
     private int customerId;
    private int nProducts;
    private int element = 0;
    private Product[]products;

    Cart(int customerId, int nProducts) {
    this.customerId = customerId;
    this.nProducts = nProducts;
    this.products = new Product[nProducts];
    }
    
    public int getCustomerId(){
    return customerId;
    }

    public int getnProducts(){
    return nProducts;
    }

    public Product[] getProducts(){
    return products;
    }

    public int setCustomerId(int customerId){
    this.customerId = customerId;
    if(customerId <0){
    return Math.abs(customerId);
    }else{
    return customerId;
     }
    }

    public int setnProducts(int nProducts){
    this.nProducts = nProducts;
    if(nProducts < 0){
    return Math.abs(nProducts);
    }else{
    return nProducts;
     }
    }

    public void setProducts(Product[] products){
    this.products = products;
    }
   
    public void addProduct(Product product){
    products[this.element] = product;
    this.element++;
    
    }
    
    public void removeProduct(int index){
    if (index >= 0 && index < nProducts){
     // Shift elements to remove the product at index
    for (int i = index; i < nProducts - 1; i++) {
    products[i] = products[i + 1];
    }
    nProducts--;
    products[nProducts] = null; // Set the last element to null for clarity
    }else{
    System.out.println("Invalid product index!");
     }
    }
    
    public float calculatePrice(){
    float totalPrice = 0;
    for(int i = 0; i < nProducts; i++){
    totalPrice += products[i].getPrice();
    }
    return totalPrice;
    }
    
    public void placeOrder(){
    Order order = new Order(customerId , 1 , products , (float)calculatePrice());
    order.printOrderInfo();
    }
    
}
package ecommerceesystem;

public class Order {
      private int customerId;
    private int orderId;
    private Product[]products;
    private float totalPrice;
    Order(int customerId, int orderId, Product[] products, float totalPrice){
    this.customerId = customerId;
    this.orderId = orderId;
    this.products = products;
    this.totalPrice = totalPrice;
    }
    public int getCustomerId(){
    return customerId;
    }
    public int getOrderId(){
    return orderId;
    }
    public Product[] getProducts(){
    return products;
    }
    public double getTotalPrice(){
    return totalPrice;
    }
    public int setCustomerId(int customerId){
    this.customerId = customerId;
    if(customerId <0){
    return Math.abs(customerId);
    }else{
    return customerId;
     }
    }
    public int setOrderId(int orderId){
    this.orderId = orderId;
    if(orderId <0){
    return Math.abs(orderId);
    }else{
    return orderId;
     }
    }
    public void setProducts(Product[] products){
    this.products = products;
    }
    public float setTotalPrice(float totalPrice){
    this.totalPrice = totalPrice;
    if(totalPrice <0){
    return Math.abs(totalPrice);
    }else{
    return totalPrice;
     }
    } 
    public void printOrderInfo(){
    System.out.println("Here's your order's summary:");
    System.out.println("Order ID: " + orderId);
    System.out.println("Customer ID: " + customerId);
    System.out.println("Products: " );
    for(int i = 0 ; i< products.length ; i++){
    System.out.println(products[i].getName() + " - $" + products[i].getPrice());
     }
    System.out.println("Total price: $" + totalPrice);
    }  
}
package ecommerceesystem;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class GUI extends JFrame {
     private JLabel customerIdLabel, nameLabel, addressLabel, nProductLabel, productsLabel, totalPriceLabel;
    private JTextField customerIdField, nameField, addressField,nProductField;
    private JComboBox<String> productsComboBox;
    private JButton addProductButton, calculatePriceButton, printOrderButton;
    private String[] selectedProducts = new String[4]; // Assuming a maximum of 3 products can be selected
    private double totalPrice = 0;

    public GUI() {
        setTitle("E-Commerce System");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new GridLayout(7, 2));

        customerIdLabel = new JLabel("Enter your ID:");
        add(customerIdLabel);
        customerIdField = new JTextField();
        add(customerIdField);

        nameLabel = new JLabel("Enter your Name:");
        add(nameLabel);
        nameField = new JTextField();
        add(nameField);

        addressLabel = new JLabel("Enter your Address:");
        add(addressLabel);
        addressField = new JTextField();
        add(addressField);
        
        nProductLabel = new JLabel("How many products you want to add to your cart? ");
        add(nProductLabel);
        nProductField = new JTextField();
        add(nProductField);

        productsLabel = new JLabel("Select Product:");
        add(productsLabel);
        String[] products = {"Smartphone - $599.9", "T-shirt - $19.99", "OOP Book - $39.99"};
        productsComboBox = new JComboBox<>(products);
        add(productsComboBox);

        addProductButton = new JButton("Add Product");
        add(addProductButton);

        totalPriceLabel = new JLabel("Total Price: $0.0");
        add(totalPriceLabel);

        calculatePriceButton = new JButton("Calculate Total Price");
        add(calculatePriceButton);

        printOrderButton = new JButton("Print Order Info");
        add(printOrderButton);

        addProductButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                for (int i = 0; i < selectedProducts.length; i++) {
                    if (selectedProducts[i] == null) {
                        selectedProducts[i] = (String) productsComboBox.getSelectedItem();
                        JOptionPane.showMessageDialog(null, "Product added successfully!");
                        break;
                    }
                }
            }
        });
        calculatePriceButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                totalPrice = 0;
                for (String product : selectedProducts) {
                    if (product != null) {
                        if (product.contains("Smartphone")) {
                            totalPrice += 599.9; 
                        } else if (product.contains("T-shirt")) {
                            totalPrice += 19.99;
                        } else if (product.contains("OOP Book")) {
                            totalPrice += 39.99;
                        }
                    }
                }
                totalPriceLabel.setText("Total Price: $" + totalPrice);
            }
        });
        printOrderButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                
                StringBuilder orderInfo = new StringBuilder();
                orderInfo.append("Customer ID: ").append(customerIdField.getText()).append("\n");
                orderInfo.append("Name: ").append(nameField.getText()).append("\n");
                orderInfo.append("Address: ").append(addressField.getText()).append("\n");
                orderInfo.append("Number of Products: ").append(nProductField.getText()).append("\n");
                orderInfo.append("Selected Products:\n");
                for (String product : selectedProducts) {
                    if (product != null) {
                        orderInfo.append("- ").append(product).append("\n");
                    }
                }
                orderInfo.append("Total Price: $").append(totalPrice);
                JOptionPane.showMessageDialog(null, orderInfo.toString(), "Order Information", JOptionPane.INFORMATION_MESSAGE);
            }
        });
        setVisible(true);
    }  
    
}